"""Defines utility things.

"""

import os
import shelve
import inspect
import hashlib
import datetime
from enum import Enum
from django.conf import settings


class ChoiceEnum(Enum):
    """Enum class which can be used in django field choices.

    """
    @classmethod
    def choices(cls):
        # get all members of the class
        members = inspect.getmembers(cls, lambda m: not inspect.isroutine(m))
        # filter down to just properties
        props = [m for m in members if m[0][:2] != '__']
        # format into django choice tuple
        return tuple([(str(p[1].value), p[0]) for p in props])


def gen_random_md5(len_=32):
    return hashlib.md5(str(datetime.datetime.now())).hexdigest()[:len_]


class FileBroker(object):
    """For debug mode, we don't need to use asynchronous search with celery
    and redis broker.
    To achieve this without modifying client code, server mimics celery
    behavior and replaces redis with txt file.
    NOTE that `shelve` isn't thread safe. That being said, this object should
    never be used in production env.

    """
    _FILENAME = 'filebroker'

    def __init__(self):
        self._broker = shelve.open(
            os.path.join(settings.BASE_DIR, self._FILENAME))

    def get(self, key):
        if self._broker.has_key(key):
            return self._broker[key]

    def set(self, value):
        """`key` is generated by random hashing and returned.

        """
        key = gen_random_md5()
        self._broker[key] = value
        return key

    def close(self):
        self._broker.close()

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, exc_traceback):
        self.close()
